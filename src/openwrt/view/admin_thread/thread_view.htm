<%-
	local ubus = require "ubus"
	local sys = require "luci.sys"
	local utl = require "luci.util"

	function connect_ubus(methods)
		local result
		local conn = ubus.connect()

		if not conn then
			error("Failed to connect to ubusd")
		end

		result = conn:call("otbr", methods, {})

		return result
	end

	function threadget(action)
		local result = connect_ubus(action)

		return result
	end
-%>

<%+header%>

<% include("admin_thread/thread_header")%>
<% if threadget("state").State == "disabled" then write('<meta http-equiv="refresh" content="0; url=' .. url('admin/network/thread') .. '">') end %>

<h2><%:Thread View: %><%=threadget("networkname").NetworkName%><%: (wpan0)%></h2>
<div>This is the list and topograph of your thread network.</div>
<br />

<ul class="cbi-tabmenu">
	<li class="cbi-tab" id="listtab" style="text-align:center;"><a href="javascript:showlist();"><%:List%></a></li>
	<li class="cbi-tab-disabled" id="graphtab" style="text-align:center;"><a href="javascript:showgraph();"><%:Topology Graph%></a></li>
	<li class="cbi-tab-disabled" id="iptab" style="text-align:center;"><a href="javascript:showip();"><%:IPv6 Addresses%></a></li>
</ul>

<!-- list div -->
<div style="width:100%;" id="listdiv">
	<!-- leader list -->
	<h3><%: Leader Situation of Network%></h3><br />
	<div class="cbi-map" style="width:90%;margin-left:5%;">
		<div class="cbi-section">
			<div class="table">
				<div class="tr table-titles" style="background-color:#eee;">
					<div class="th col-3 center"><%:Leader Router Id%></div>
					<div class="th col-3 center"><%:Partition Id%></div>
					<div class="th col-2 center"><%:Weighting%></div>
					<div class="th col-2 center"><%:Data Version%></div>
					<div class="th col-2 center"><%:Stable Data Version%></div>
				</div>

				<!-- leader situatioin -->
				<% leader = threadget("leaderdata").leaderdata %>
				<div class="tr cbi-rowstyle-2%>" style="border:solid 1px #ddd; border-top:hidden;">
					<div class="td col-3 center"><%=leader.LeaderRouterId%></div>
					<div class="td col-3 center"><%=leader.PartitionId%></div>
					<div class="td col-2 center"><%=leader.Weighting%></div>
					<div class="td col-2 center"><%=leader.DataVersion%></div>
					<div class="td col-2 center"><%=leader.StableDataVersion%></div>

				</div>
			</div>
		</div>
	</div>
	<br />
	<h3><%: Neighbors %></h3><br />
	<!-- neighbor list -->
	<table class="table" id="neighbors" style="width:90%;margin-left:5%;">
		<tr class="tr table-titles" style="background-color:#eee;">
			<th class="th col-2 center"><%:RLOC16%></th>
			<th class="th col-2 center"><%:Role%></th>
			<th class="th col-2 center"><%:Age%></th>
			<th class="th col-2 center"><%:Avg RSSI%></th>
			<th class="th col-2 center"><%:Last RSSI%></th>
			<th class="th col-2 center"><%:Mode%></th>
			<th class="th col-4 center"><%:Extended MAC%></th>
			<th class="th cbi-section-actions">&#160;</th>
		</tr>
		<!--
		<tr class="tr placeholder">
			<td class="td"><em><%:Collecting data...%></em></td>
		</tr>
		-->
		
	</table>
	<!--/neighbor list-->

	<!-- parent list -->
	<table class="table" id="parent" style="width:90%;margin-left:5%;display:none;">
		<tr class="tr table-titles" style="background-color:#eee;">
			<th class="th col-2 center"><%:RLOC16%></th>
			<th class="th col-2 center"><%:Role%></th>
			<th class="th col-2 center"><%:Age%></th>
			<th class="th col-2 center"><%:LinkQualityIn%></th>
			<th class="th col-4 center"><%:ExtAddress%></th>
			<th class="th cbi-section-actions">&#160;</th>
		</tr>
		<!--
		<tr class="tr placeholder">
			<td class="td"><em><%:Collecting data...%></em></td>
		</tr>
		-->
	</table>
	<!--/parent list-->
</div>

<!-- graph div -->
<div style="width:100%;margin-left:5%;display:none;" id="graphdiv">
	<div style="width:20%"><svg id="topologyLegend"></svg></div>
	<svg width="960" height="500" id="graph"></svg>
</div>

<!-- ip table div -->
<div style="width:100%;margin-left:5%;display:none;" id="ipdiv">
	<table class="table" id="ip_addresses" style="width:90%;margin-left:5%;">
		<tr class="tr table-titles" style="background-color:#eee;">
			<th class="th col-2 center"><%:RLOC16%></th>
			<th class="th col-2 center"><%:IP Addresses%></th>
		</tr>
	</table>
</div>



<div class="cbi-page-actions right" style="margin-top:10%;">
	<form class="inline" action="<%=url('admin/network/thread')%>" method="get">
		<input class="cbi-button cbi-button-neutral" type="submit" value="<%:Back to overview%>" />
	</form>
	<form class="inline" action="<%=url('admin/network/thread_add')%>" method="post">
		<input type="hidden" name="token" value="<%=token%>" />
		<input class="cbi-button cbi-button-add" type="submit" value="<%:Add%>" />
	</form>
</div>
<%+footer%>

<script type="text/javascript" src="/luci-static/resources/d3.v4.min.js"></script>
<script type="text/javascript" src="/luci-static/resources/handle_error.js"></script>
<script type="text/javascript">//<![CDATA[
	handle_error(GetURLParameter('error'));

	var svg = d3.select("#graph"),
		width = +svg.attr("width"),
		height = +svg.attr("height"),
		color = d3.scaleOrdinal(d3.schemeCategory10);

	function getRloc(rloc, localrloc) {
		if(rloc == localrloc) return rloc + " ( your device )";
		else return rloc;
	}
	function getNodeFillColor(role) {
		if(role == 'ftd') return "#33579a";
		else if(role == 'mtd') return "#00afd8";
		else if(role == 'router') return "#33579a";
		else if(role == 'leader') return "#000000";
		else if(role == 'joiner') return "#778899";
	}
	var nodes, links;
	var simulation = d3.forceSimulation(nodes)
		.force("charge", d3.forceManyBody().strength(-1000))
		.force("link", d3.forceLink(links).distance(200))
		.force("x", d3.forceX())
		.force("y", d3.forceY())
		.alphaTarget(1)
		.on("tick", ticked);

	var g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")"),
		link = g.append("g").attr("stroke", "#eee").attr("stroke-width", 1.5).selectAll(".link"),
		node = g.append("g").attr("stroke", "#fff").attr("stroke-width", 1.5).selectAll(".node"),
 		text = g.append("g").selectAll(".text");

	var legend = d3.select("#topologyLegend");

	pentagon = nagon.bind(null, 5)

	function nagon(n, cx, cy, r) {
		
		out = []
		for (let i = 0; i < n; i++) {
			theta = Math.PI * 2 / n * (i+0.5)
			out.push(cx + Math.sin(theta) * r)
			out.push(cy + Math.cos(theta) * r)
		}
		return out
	}

	function getNodeShapeFn(node) {
		if (node == "leader" || node == "router") 
			return pentagon;
		else if (node == "ftd" || node == "mtd" || node == "joiner")
			return nagon.bind(null, 50);
	}

	function make_node(l, cx, cy, r, node) {
		let shape = getNodeShapeFn(node), fill_col = getNodeFillColor;
		if (typeof(node) == "function") {
			shape = (x,y,r) => (n) => getNodeShapeFn(node(n))(x, y, r(n));
			fill_col = _=>n=>getNodeFillColor(node(n));
		} 
		if (typeof r == "function") {
			if (typeof node =="function")
				shape = (x,y,r) => (n) => getNodeShapeFn(node(n))(x, y, r(n));
			else
				shape = (x,y,r) => (n) => getNodeShapeFn(node)(x, y, r(n));
			
		}
		return l
			.append("polyline")
			.attr("points", shape(cx, cy, r))
			.style("fill", fill_col(node));
	}

	make_node(legend, 50, 30, 8, "leader");
	make_node(legend, 50, 50, 8, "router");
	make_node(legend, 50, 70, 6, "ftd");
	make_node(legend, 50, 90, 6, "mtd");
	make_node(legend, 50, 110, 4, "joiner");
	
	legend.append("polyline").attr("points",pentagon(50, 30, 8)).style("fill", getNodeFillColor("leader"));
	legend.append("polyline").attr("points",pentagon(50, 50, 8)).style("fill", getNodeFillColor("router"));
	legend.append("circle").attr("cx",50).attr("cy",70).attr("r", 6).style("fill", getNodeFillColor("ftd"));
	legend.append("circle").attr("cx",50).attr("cy",90).attr("r", 6).style("fill", getNodeFillColor("mtd"));
	legend.append("circle").attr("cx",50).attr("cy",110).attr("r", 4).style("fill", getNodeFillColor("joiner"));
	legend.append("text").attr("x", 60).attr("y", 35).text("leader").style("font-size", "15px").attr("alignment-baseline","middle");
	legend.append("text").attr("x", 60).attr("y", 55).text("router").style("font-size", "15px").attr("alignment-baseline","middle");
	legend.append("text").attr("x", 60).attr("y", 75).text("FTD child").style("font-size", "15px").attr("alignment-baseline","middle");
	legend.append("text").attr("x", 60).attr("y", 95).text("MTD child").style("font-size", "15px").attr("alignment-baseline","middle");
	legend.append("text").attr("x", 60).attr("y", 115).text("new joiner").style("font-size", "15px").attr("alignment-baseline","middle");

	function update_graph(nodes, links, localrloc) {
		node = node.data(nodes, function(d) { return d.rloc;});
		node.exit().remove();
		enter = node.enter();
		node = make_node(enter, 0, 0, d=>d.role in ['router', 'leader'] ? 10 : 7, d=>d.role).merge(node)
		

		link = link.data(links, function(d) { return d.source.rloc + "-" + d.target.rloc; });
		link.exit().remove();
		link = link.enter().append("line").merge(link);

		text = text.data(nodes, function(d) { return getRloc(d.rloc, localrloc); });
		text.exit().remove();
		text = text.enter().append('text')
			.attr("fill", "black")
			.attr("dx", 20)
			.attr("dy", 8)
			.text(function(d) { return getRloc(d.rloc, localrloc); })
			.merge(text);

		simulation.nodes(nodes);
		simulation.force("link").links(links);
		simulation.alpha(1).restart();
	}

	function ticked() {
		console.log(node)
		node.attr("transform", d => `translate(${d.x} ${d.y})`)
		link.attr("x1", function(d) { return d.source.x; })
				.attr("y1", function(d) { return d.source.y; })
				.attr("x2", function(d) { return d.target.x; })
				.attr("y2", function(d) { return d.target.y; });
		text.attr("x",function(d){ return d.x; })
				.attr("y",function(d){ return d.y; });
	}
	
	// neighbor list is visible by default, so we start this poll
	var neighbor_request_poll = L.Request.poll.add(2, '<%=url('admin/network/thread_neighbors')%>', null, thread_neighbors_handler);
	var graph_request_poll = null;
	var ip_request_poll = null;

	function cancel_all_polls() {
		if (neighbor_request_poll !== null)
			L.Request.poll.remove(neighbor_request_poll);
		if (graph_request_poll !== null)
			L.Request.poll.remove(graph_request_poll);
		if (ip_request_poll !== null)
			L.Request.poll.remove(ip_request_poll);
	}

	function showlist() {
		document.getElementById('listdiv').style.display = "block";
		document.getElementById('listtab').className = "cbi-tab";

		document.getElementById('graphdiv').style.display = "none";
		document.getElementById('graphtab').className = "cbi-tab-disabled";

		document.getElementById('ipdiv').style.display = "none";
		document.getElementById('iptab').className = "cbi-tab-disabled";

		cancel_all_polls();
		neighbor_request_poll = L.Request.poll.add(2, '<%=url('admin/network/thread_neighbors')%>', null, thread_neighbors_handler);
	}

	function showgraph() {
		document.getElementById('graphdiv').style.display = "block";
		document.getElementById('graphtab').className = "cbi-tab";

		document.getElementById('listdiv').style.display = "none";
		document.getElementById('listtab').className = "cbi-tab-disabled";
		document.getElementById('ipdiv').style.display = "none";
		document.getElementById('iptab').className = "cbi-tab-disabled";

		cancel_all_polls();
		graph_request_poll = L.Request.poll.add(5, '<%=url('admin/network/thread_graph')%>', null, thread_graph_handler);

	}

	function showip()
	{
		document.getElementById('ipdiv').style.display = "block";
		document.getElementById('iptab').className = "cbi-tab";

		document.getElementById('listdiv').style.display = "none";
		document.getElementById('listtab').className = "cbi-tab-disabled";
		document.getElementById('graphdiv').style.display = "none";
		document.getElementById('graphtab').className = "cbi-tab-disabled";

		cancel_all_polls();
		ip_request_poll = L.Request.poll.add(5, '<%=url('admin/network/thread_ipdata')%>', null, thread_ip_handler);
	}

	function getRole(rloc, leader) {
		if(parseInt(rloc) == leader) return 'leader';
		else if((parseInt(rloc) & 0xff) == 0) return 'router';
		else return 'ftd';
	}

	//XHR.poll(5, '<%=url('admin/network/thread_graph')%>', null,
	function thread_graph_handler(x, st, d)
	{
		if(st)
		{
			nodes = [];
			links = [];

			var leaderRloc = st.leader << 10;
			var localrloc = st.rloc16;
			// get local informatioin
			st.connect.forEach(function(bss) {
				var localIndex = getNodesIndex(bss.rloc);
				if(localIndex == -1)
				{
					nodes.push( {
						rloc: bss.rloc,
						role: getRole(bss.rloc, leaderRloc)
					} );
					localIndex = getNodesIndex(bss.rloc);
				}
				if(bss.hasOwnProperty('childdata')) {
					bss.childdata.forEach(function(child) {
						if(getNodesIndex(child.rloc) == -1)
						{
							nodes.push( {
								rloc: child.rloc,
								role: (((child.mode & 0x2) >> 1 == 1) ? 'ftd' : 'mtd')
							} );
						}
						links.push( {
							source: localIndex,
							target: getNodesIndex(child.rloc)
						} );
					});
				}
				bss.routedata.forEach(function(router) {
					if(getNodesIndex(router.rloc) == -1)
					{
						nodes.push( {
							rloc: router.rloc,
							role: getRole(router.rloc, leaderRloc)
						} );
					}
					links.push( {
						source: localIndex,
						target: getNodesIndex(router.rloc)
					} );
				});
			});

			var i;
			for(i = 0;i < st.joinernum;i++) {
				nodes.push( {
					rloc: "new joiner" + i.toString(),
					role: 'joiner'
				} );
			}

			update_graph(nodes, links, localrloc);
		}
	}

	function getNodesIndex(targetRloc)
	{
		var i;
		for (i = 0; i < nodes.length; i++)
		{
			if(nodes[i].rloc == targetRloc)
				return Number(i);
		}
		return Number(-1);
	}

	//XHR.poll(2, '<%=url('admin/network/thread_neighbors')%>', null,
	function thread_neighbors_handler(x, st, d)
	{
		if (st && st.state == 'child')
		{
			var tb = document.getElementById('parent');
			document.getElementById('neighbors').style.display = "none";
			if(tb)
			{
				var rows = [];

				st.neighbor.forEach(function(bss) {
					rows.push([
					'<div class="col-2 center"> %s </div>'.format(bss.Rloc16),
					'<div class="col-2 center"> %s </div>'.format(transRole(bss.Role)),
					'<div class="col-2 center"> %s </div>'.format(bss.Age),
					'<div class="col-2 center"> %s </div>'.format(bss.LinkQualityIn),
					'<div class="col-4 center"> %s </div>'.format(bss.ExtAddress),
					]);
				});
				var joiner;
				for (joiner = 0; joiner < st.joinernum; joiner++) {
					rows.push([
					'<div class="col-2 center"> Pending </div>',
					'<div class="col-2 center"> New Joiner </div>',
					'<div class="col-2 center"> Pending </div>',
					'<div class="col-2 center"> Pending </div>',
					'<div class="col-4 center"> %s </div>'.format(st.joinerlist[joiner].isAny ? "*" : st.joinerlist[joiner].eui64),
					'<div class="th cbi-section-actions">' +
					'<form action="<%=url('admin/network/joiner_remove')%>" method="post">' +
						'<input type="hidden" name="token" value="<%=token%>" />' +
						'<input type="hidden" name="isAny" value="%d" />'.format(st.joinerlist[joiner].isAny) +
						'<input type="hidden" name="eui64" value="%s" />'.format(st.joinerlist[joiner].isAny ? "*" : st.joinerlist[joiner].eui64) +
						'<input class="cbi-button cbi-button-reset" type="submit" value="<%:Remove%>" />' +
					'</form>' +
					'</div>'
					]);
				}
				var rows_elem = rows.map((row) => row.map(toElem));
				cbi_update_table(tb, rows_elem, '<center><em><%:No information available%></em></center>');
				tb.style.display = "table";
			}
		}
		else if(st)
		{
			var tb = document.getElementById('neighbors');
			document.getElementById('parent').style.display = "none";
			if(tb)
			{
				var rows = [];

				st.neighbor.forEach(function(bss) {
					rows.push([
					'<div class="col-2 center"> %s </div>'.format(bss.Rloc16),
					'<div class="col-2 center"> %s </div>'.format(transRole(bss.Role)),
					'<div class="col-2 center"> %s </div>'.format(bss.Age),
					'<div class="col-2 center"> %s </div>'.format(bss.AvgRssi),
					'<div class="col-2 center"> %s </div>'.format(bss.LastRssi),
					'<div class="col-2 center"> %s </div>'.format(bss.Mode),
					'<div class="col-4 center"> %s </div>'.format(bss.ExtAddress)
					]);
				});
				var joiner;
				for (joiner = 0; joiner < st.joinernum; joiner++) {
					rows.push([
					'<div class="col-2 center"> Pending </div>',
					'<div class="col-2 center"> New Joiner </div>',
					'<div class="col-2 center"> Pending </div>',
					'<div class="col-2 center"> Pending </div>',
					'<div class="col-2 center"> Pending </div>',
					'<div class="col-2 center"> Pending </div>',
					'<div class="col-4 center"> %s </div>'.format(st.joinerlist[joiner].isAny ? "*" : st.joinerlist[joiner].eui64),
					'<div class="th cbi-section-actions">' +
					'<form action="<%=url('admin/network/joiner_remove')%>" method="post">' +
						'<input type="hidden" name="token" value="<%=token%>" />' +
						'<input type="hidden" name="isAny" value="%d" />'.format(st.joinerlist[joiner].isAny) +
						'<input type="hidden" name="eui64" value="%s" />'.format(st.joinerlist[joiner].isAny ? "*" : st.joinerlist[joiner].eui64) +
						'<input class="cbi-button cbi-button-reset" type="submit" value="<%:Remove%>" />' +
					'</form>' +
					'</div>'
					]);
				}
				var rows_elem = rows.map((row) => row.map(toElem));
				cbi_update_table(tb, rows_elem, '<center><em><%:No information available%></em></center>');
				tb.style.display = "table";
			}
		}
	};

	function thread_ip_handler(x, st, d)
	{
		if (st)
		{
			var table = document.getElementById("ip_addresses");
			rows = [];

			Object.entries(st).forEach(([k,v]) => {
				var ip_br = v.ip.reduce((acc, cur) => acc.concat(cur, E('br')), []);
				rows.push([v.rloc, ip_br]);
			});

			cbi_update_table(table, rows, E('em', _('No information available')));
		}

	}

	function transRole(info) {
		if(info == "C") return 'Child';
		else if(info == "R") return "Router";
		else return "Pending";
	}
//]]></script>
